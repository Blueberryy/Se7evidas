======================================================================================================================================================================================
DECORATE marker thingy:
//-------------------------------------------------------------------------------------------
//
// <Name here>
//
//-------------------------------------------------------------------------------------------
======================================================================================================================================================================================
Regex stuff for c-style code:
1:
    Match: /\n(\s+)?\{/
    Replace with: / {/
======================================================================================================================================================================================
Regexes for TEXTURES stuff:
Hands:
    Match: /HAND-([0-9]+)/
    Replace with: /"graphics/Hands/Hand-$1.png"/

Frames:
    Match: /Frame([0-9]+)/
    Replace with: /"graphics/Weapons/<Weapon>/Frame$1.png"/

Frames:
    Match: /Part([0-9]+)/
    Replace with: /"graphics/Weapons/<Weapon>/Part$1.png"/
======================================================================================================================================================================================
Conversion tables:
Original doom monster health to S7 monster health: <health> * 1.5;
Weapon spread to monster spread: <weapon  spread> * 1.25;
Monster spread to weapon spread: <monster spread> * 0.8;

Fixed to float: <fixed> / 65535.0;
Float to fixed: <float> * 65535.0;

Fixed to int (truncate): <fixed> >> 16;
Int to fixed:            <fixed> << 16;
======================================================================================================================================================================================
Things to update when adding new stuff:
PK3 Source/DECORATE/Player.DEC {
    weaponSlot properties: weapon actor names;
}

C_Source/inc/Common/weapons/weap_data.c {
    WeaponNames array: Weapon actor names;
    ClipNames: In mag ammo actor names;
    AmmoNames: Ammo type actor names;
    S7_HW_2ModeWpns: Weapon actor names; (Weapons with 2 switchable fire modes)
}

C_Source/inc/Common/common/player.c {
    PD_AmmoTypes: Ammo types info;

}

C_Source/src/Common/systems/HUD.c {
    AmmoList: Ammo type actor names;
    WeaponsList: Weapon actor names;
    LootList: Loot items actor names;
}

C_Source/src/ZDoom/save_system/save_invdata.c {
    importantInvInfo = normalInvInfo = Inventory items that are saved by the save system;
}

C_Source/src/Common/shop/shop_items/ = Shop stuff;

(I think that's all)
======================================================================================================================================================================================
ZScript stuff:
    Ready2:
        AK47 A 1 {
            if (CheckInventory ("S7_Reloading", 1))
                return ResolveState ("Reload");
            if (CheckInventory ("S7_DoMelee", 1))
                return ResolveState ("QuickMelee");
            if (CheckInventory ("S7_ChangeFireMode", 1))
                return ResolveState ("ChangeMode");

            GiveInventory ("S7_WeapReady", 1);
            A_WeaponReady ();

            return ResolveState (null);
        }
        loop;

    ChangeMode:
        AK47 A 5 {
            TakeInventory ("S7_ChangeFireMode", 0x7FFFFFFF);

            if (CheckInventory ("S7_AK47SemiAuto", 1))
                TakeInventory ("S7_AK47SemiAuto", 0x7FFFFFFF);
            else
                GiveInventory ("S7_AK47SemiAuto", 1);

            A_PlaySound ("Weapons/ModeChange", CHAN_7);

            return ResolveState (null);
        }
        goto Ready2;

    Reload:
        TNT1 A 0 {
            TakeInventory ("S7_Reloading", 1);

            if (CheckInventory (invoker.ammoType1, 0) || !CheckInventory (invoker.ammoType2, 1))
                return ResolveState ("Ready2");

            int ammoAmount = min (FindInventory (invoker.ammoType1).maxAmount - CountInv (invoker.ammoType1), CountInv (invoker.ammoType2));
            if (ammoAmount <= 0)
                return ResolveState ("Ready2");

            GiveInventory (invoker.ammoType1, ammoAmount);
            TakeInventory (invoker.ammoType2, ammoAmount);

            return ResolveState ("ReloadFinish");
        }

{replace A_JumpIfNoAmmo with this:}
            if (!invoker.CheckAmmo (PrimaryFire, false, true))
                return ResolveState ("<state>");
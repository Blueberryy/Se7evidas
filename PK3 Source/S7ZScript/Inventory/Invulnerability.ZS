/*
 *  Se7evidas - A GZDoom mod
 *  Copyright (C) 2018-2019 Chronos "phantombeta" Ouroboros
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

class S7_InvulnPowerBase : PowerLightAmp {
    default {
        Powerup.Duration -30;
    }

    override void DoEffect () {
        Super.DoEffect ();

        if (Owner.player) {
            if (!isBlinking ())
                Shader.SetEnabled (Owner.player, "S7_Invuln", true);
            else
                Shader.SetEnabled (Owner.player, "S7_Invuln", false);
        }
    }

    override void EndEffect () {
        Super.EndEffect ();

        if (Owner && Owner.player)
            Shader.SetEnabled (Owner.player, "S7_Invuln", false);
    }

    override void DetachFromOwner () {
        if (Owner && Owner.player)
            Shader.SetEnabled (Owner.player, "S7_Invuln", false);

        Super.DetachFromOwner ();
    }

    override void OnDestroy () {
        if (Owner && Owner.player)
            Shader.SetEnabled (Owner.player, "S7_Invuln", false);

        Super.OnDestroy ();
    }
}

class S7_InvulnerabilityEffect : S7_EffectsBase {
    default {
        RenderStyle "Add";
        Alpha 0.5;

        +NOGRAVITY +NOINTERACTION +NOBLOCKMAP
    }

    override void Tick () {
        if (isFrozen ())
            return;

        CheaperTick ();
    }

    states {
    Spawn:
        SINV A 1 bright;
    Fade:
        #### # 1 bright A_FadeOut (0.1);
        loop;
    }
}

//-------------------------------------------------------------------------------------------
//
// Invulnerability type 1
//
//-------------------------------------------------------------------------------------------
class S7_InvulPowerType1 : S7_InvulnPowerBase {
    int healingSpeed;
    int prevHealth;

    override void InitEffect () {
        Super.InitEffect ();

        healingSpeed = 1;
    }

    override void DoEffect () {
        Super.DoEffect ();

        let pPawn = S7_BasePlayer (Owner);
        if (!pPawn)
            return;

        int    health = pPawn.health;
        int maxHealth = pPawn.GetMaxHealth ();

        if (healingSpeed != 1 && health >= maxHealth)
            healingSpeed = 1;
        else if (prevHealth > 25 && health <= 25)
            healingSpeed++;

        prevHealth = health;
        if (health > 0 && !pPawn.bKilled)
            Owner.GiveBody (healingSpeed);
    }

    override void EndEffect () {
        Super.EndEffect ();
    }

    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive) {
        if (passive && damage > 0)
            newdamage = max (0, int (damage * 0.25));
        else if (!passive && damage > 0)
            newdamage = max (0, int (damage * 1.5));
    }
}

/* Credits:
** Sprites: Eriance
*/
class S7_InvulnerabilityType1 : PowerupGiver {
    default {
        //$Category "Se7evidas/Powerups"
        //$Color 9
        //$Title "Invulnerability (Type 1)"
        //$NotAngled

        Inventory.MaxAmount 0;
        Inventory.PickupMessage "$S7_INVULN";
        Powerup.Type 'S7_InvulPowerType1';

        +INVENTORY.AUTOACTIVATE +INVENTORY.ALWAYSPICKUP +INVENTORY.BIGPOWERUP +COUNTITEM
    }

    override bool TryPickup (in out Actor toucher) {
        if (toucher && toucher.CheckInventory ('S7_InvulPowerType2', 1)) {
            bAlwaysPickup = false;
            return false;
        }

        bAlwaysPickup = true;
        return PowerupGiver.TryPickup (toucher);
    }

    override void Tick () {
        Super.Tick ();

        if (Owner || isFrozen ())
            return;

        for (int i = 0; i < random [S7_MiscSFXRNG] (1, 2); i++) {
            let act = Spawn ('S7_InvulnerabilityEffect', pos);

            if (!act) // Shouldn't happen, but...
                continue;

            act.vel = (frandom [S7_MiscSFXRNG] (-2.5, 2.5), frandom [S7_MiscSFXRNG] (-2.5, 2.5), frandom [S7_MiscSFXRNG] (-2.5, 2.5));
            act.sprite = sprite;
            act.frame = frame;
        }
    }

    states {
    Spawn:
        SINV A 12 bright A_SetTics (random [invSpc] (17, 35 * 5));
        TNT1 A 0 A_Jump (256, "Shake1", "Shake1", "Shake2", "Shake2", "Scream");
        loop;

    Shake1:
        SINV BC 5 bright;
        goto Spawn;
    Shake2:
        SINV CB 5 bright;
        goto Spawn;

    Scream:
        SINV A  8 bright;
        SINV D 35 bright;
        goto Spawn;
    }
}

//-------------------------------------------------------------------------------------------
//
// Invulnerability type 2
//
//-------------------------------------------------------------------------------------------
class S7_InvulPowerType2 : S7_InvulnPowerBase {
    const BaseDurability = 5000;

    int durability;

    default {
        Powerup.Duration -90; // 1.5 minutes
        Powerup.Color "InverseMap";

        +INVENTORY.PERSISTENTPOWER
    }

    override bool HandlePickup (Inventory item) {
        bool ret = Super.HandlePickup (item);

        if (ret && item.GetClass () == GetClass ()) {
            let power = S7_InvulPowerType2 (item);

            if (power.EffectTics == 0) {
                power.bPickupGood = true;
                return true;
            }

            durability = BaseDurability;
            power.bPickupGood = true;
            return true;
        }

        return ret;
    }

    override void InitEffect () {
        Super.InitEffect ();

        durability = BaseDurability;
    }

    override void DoEffect () {
        Super.DoEffect ();

        if (durability <= 0) {
            Destroy ();
            return;
        }
    }

    override void ModifyDamage (int damage, Name damageType, out int newDamage, bool passive) {
        if (!passive || damage <= 0 || durability <= 0)
            return;

        durability -= damage;
        newDamage = 0;
    }
}

/* Credits:
** Sprites: Eriance, Chronos "phantombeta" Ouroboros
*/
class S7_InvulnerabilityType2 : S7_InvulnerabilityType1 {
    default {
        //$Category "Se7evidas/Powerups"
        //$Color 9
        //$Title "Invulnerability (Type 2)"
        //$NotAngled

        Inventory.PickupMessage "$S7_INVULN";
        Powerup.Type 'S7_InvulPowerType2';
    }

    override bool TryPickup (in out Actor toucher) {
        if (toucher && toucher.CheckInventory ('S7_InvulPowerType1', 1)) {
            bAlwaysPickup = false;
            return false;
        }

        bAlwaysPickup = true;
        return PowerupGiver.TryPickup (toucher);
    }

    states {
    Spawn:
        SINV E 12 bright A_SetTics (random [invSpc] (17, TicRate * 5));
        TNT1 A 0 A_Jump (256, "Shake1", "Shake1", "Shake2", "Shake2", "Scream");
        loop;

    Shake1:
        SINV FG 5 bright;
        goto Spawn;
    Shake2:
        SINV GF 5 bright;
        goto Spawn;

    Scream:
        SINV E  8 bright;
        SINV H 35 bright;
        goto Spawn;
    }
}